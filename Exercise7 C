#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>
#define COLS 10
#define SIZE 4

int** allocTriDown(int rows, int cols);
void printTriDown(int** A, int rows, int cols);
void printTriUp(int** A, int rows, int cols);
int returnPosTriDown(int** A, int rows, int cols);
int returnPosTriUp(int** A, int rows, int cols);
void free_matrix(void** c, int n);
void printDynamicMatrix(int** A, int rows, int cols); // same as print static matrix but with different decleration
int** alloc_matrix(int rows, int cols);
void randMatrix(int** A, int rows, int cols);
int** allocTriUp(int rows, int cols);




int main()
{
	time_t t;
	srand((unsigned)time(&t));
	printf("Triangel matrix down:\n");
	int** tree1 = allocTriDown(SIZE, SIZE);
	printTriDown(tree1, SIZE, SIZE);

	printf("Triangel matrix up:\n");
	int** tree2 = allocTriUp(SIZE, SIZE);
	printTriUp(tree2, SIZE, SIZE);

	free_matrix(tree1, SIZE);
	free_matrix(tree2, SIZE);
	return 0;
}

int returnPosTriDown(int** A, int rows, int cols)
{
	if (cols > rows) return 0;
	return A[rows][cols];
}
int** allocTriDown(int rows, int cols)
{
	int** c;
	c = (int**)calloc(rows, sizeof(int*)); // matrix is two dimention array. 1st dim
	if (!c)
		return NULL;
	for (size_t i = 0; i < rows; i++)
	{
		c[i] = (int*)calloc(i + 1, sizeof(int));
	}

	for (size_t i = 0; i < rows; i++)
	{
		for (size_t j = 0; j < i + 1; j++)
		{
			c[i][j] = 1+ rand() % 9;
		}
	}

	return c;
}
void printTriDown(int** A, int rows, int cols)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			printf("%4d", returnPosTriDown(A, i, j));
		}
		printf("\n");
	}
}

void printTriUp(int** A, int rows)
{
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < rows; j++)
		{
			printf("%4d", returnPosTriUp(A, i, j));
		}
		printf("\n");
	}
}
int** allocTriUp(int rows)
{
	int** c;
	c = (int**)calloc(rows, sizeof(int*));
	if (!c)
		return NULL;
	for (int i = 0; i < rows; i++) {
		c[i] = (int*)calloc(rows - i, sizeof(int));
	}

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < rows-i; j++)
		{
			c[i][j] = 1 + rand() % 9;
		}
	}
	return c;
}
int returnPosTriUp(int** A, int rows, int cols)
{
	if (cols < rows) return 0;
	return A[rows][cols];
}

void free_matrix(void** c, int n)
{
	int i;
	for (i = 0; i < n; i++) // run over all rows to free all arrays
		free(c[i]);
	free(c);
}
void printDynamicMatrix(int** A, int rows, int cols) // same as print static matrix but with different decleration
{
	printf("Your Dynamic matrix is:\n");
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			printf("%3d ", A[i][j]);
		}
		printf("\n");
	}
}
int** alloc_matrix(int rows, int cols)
{
	int** c, i;
	c = (int**)calloc(rows, sizeof(int*)); // matrix is two dimention array. 1st dim
	if (!c)
		return NULL;
	for (i = 0; i < rows; i++)
	{
		c[i] = (int*)calloc(cols, sizeof(int)); //2nd dim.
		if (!c[i])
		{
			free_matrix(c, i);
			return NULL;
		}
	}
	return c;
}
void randMatrix(int** A, int rows, int cols)
{
	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{
			A[i][j] = rand() % 10;
		}
	}
}
