//main
#include "Circle.h"
#include <iostream>
using namespace std;

int main()
{
	Point p1();
	Point p2(3, 3);
	Circle c1(Point(2, 3), 5);
	Circle c2;
	cout << "C1 area is: " << c1.circleArea() << endl;
	cout << "C1 scope is: " << c1.circleScope() << endl;
	cout << "C2 area is: " << c2.circleArea() << endl;
	cout << "C2 scope is: " << c2.circleScope() << endl;
	std::cout << "Circle: " << c1<< std::endl;

	return 0;
}

//Circle.cpp
#include <iostream>
#include "Circle.h"

Circle::Circle()
{
	this->pos = Point();
	this->r = 0.0;
}
Circle::Circle(Point pos_val, double r_val) 
{
	this->pos = pos_val;
	this->r = r_val;
}
Circle::~Circle() {};

Point Circle::getPos() const { return this->pos; }
double Circle::getR() const { return this->r; }
void Circle::setPos(Point pos_val) { this->pos = pos_val; }
void Circle::setR(double  r_val) { this->r = r_val; }

double Circle::circleArea()
{
	return (this->r * this->r * PI);
}
double Circle::circleScope() 
{
	return (2* this->r * PI);
}
std::ostream& operator<<(std::ostream& os, const Circle& circle) {
	os << "Center: (" << circle.getPos().getX() << ", " << circle.getPos().getY() << "), Radius: " << circle.getR();
	return os;
}
//Circle.h
#pragma once
#include "Point.h"
#define PI 3.14

class Circle
{
private:
	Point pos;
	double r;

public:
	Circle(Point pos_val, double r_val);
	Circle();
    ~Circle();

    Point getPos() const;
    double getR() const;

    void setPos(Point pos_val);
    void setR(double r_val);
    double circleArea();
    double circleScope();

    friend std::ostream& operator<<(std::ostream& os, const Circle& circle);

};
//Point.cpp
#include "Point.h"
#include <iostream>
using namespace std;

// Default constructor
Point::Point()
{
    x = (0.0);
    y = (0.0);
}

// Parameterized constructor
Point::Point(double x_val, double y_val)
{
    x = (x_val);
    y = (y_val);
}

// Destructor
Point::~Point() {}

// Getter method for x
double Point::getX() const 
{
    return x;
}

// Getter method for y
double Point::getY() const 
{
    return y;
}

// Setter method for x
void Point::setX(double x_val)
{
    x = x_val;
}

// Setter method for y
void Point::setY(double y_val) 
{
    y = y_val;
}
//Point.h
#pragma once

class Point {
private:
    double x;
    double y;

public:
    // Constructors
    Point(); // Default constructor
    Point(double x_val, double y_val); // Parameterized constructor

    // Destructor
    ~Point();

    // Getter methods
    double getX() const;
    double getY() const;

    // Setter methods
    void setX(double x_val);
    void setY(double y_val);
};
