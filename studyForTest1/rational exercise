#pragma once
#include <iostream>

class Rational {
private:
	int numerator;
	int denominator;
public:
	Rational() {numerator = 0; denominator = 1;}
	Rational(int num, int denom);
	~Rational();


	
	const int getNumerator();
	const int getDenominator();
	void setNumerator(const int num);
	void setDenominator(const int denom);
	
	const Rational operator+(const Rational& other);
	const Rational operator-(const Rational& other);
	const Rational operator*(const Rational& other);
	const Rational operator/(const Rational& other);
	void reduction();

	friend std::ostream& operator<< (std::ostream&, const Rational&);
	friend std::istream& operator>> (std::ostream&, const Rational&);

};

#include "Rational.h"
#include <iostream>
#include <sstream> // for std::istringstream

using namespace std;

int gcd(int a, int b);

Rational::Rational(int num, int denom)
{
	this->numerator = num;
	this->denominator = denom;
}
Rational::~Rational() {};
int gcd(int a, int b) {
	while (b != 0) {
		int temp = b;
		b = a % b;
		a = temp;
	}
	return a;
}

const int Rational::getNumerator()
{
	return this->numerator;
}
const int Rational::getDenominator()
{
	return this->denominator;
}
void Rational::setDenominator(const int denom) {
	this->denominator = denom;
}
void Rational::setNumerator(const int num) {
	this->numerator = num;
}
const Rational Rational::operator+(const Rational& other)
{
	int tempNum = this->numerator * other.denominator + this->denominator * other.numerator;
	int tempDenom = this->denominator * other.denominator;
	Rational temp = Rational(tempNum, tempDenom);
	temp.reduction();
	return Rational(tempNum, tempDenom);
}
const Rational Rational::operator-(const Rational& other)
{
	int tempNum = this->numerator * other.denominator - this->denominator * other.numerator;
	int tempDenom = this->denominator * other.denominator;
	Rational temp = Rational(tempNum, tempDenom);
	temp.reduction();
	return Rational(tempNum, tempDenom);
}
const Rational Rational::operator*(const Rational& other)
{
	int tempNum = this->numerator * other.numerator;
	int tempDenom = this->denominator * other.denominator;
	Rational temp = Rational(tempNum, tempDenom);
	temp.reduction();
	return Rational(tempNum, tempDenom);
}
const Rational Rational::operator/(const Rational& other)
{
	int tempNum = this->numerator * other.denominator;
	int tempDenom = this->denominator * other.numerator;
	Rational temp = Rational(tempNum, tempDenom);
	temp.reduction();
	return Rational(tempNum, tempDenom);
}
void Rational::reduction()
{
	int d = gcd(this->denominator, this->numerator);
	this->setDenominator(this->denominator / d);
	this->setNumerator(this->numerator / d);
}

std::ostream& operator<<(std::ostream& out, const Rational& rational)
{
	out << "" << rational.numerator << "/" << rational.denominator << endl;
	return out;
}

std::istream& operator>>(std::istream& in, Rational& rational) {
	std::string input;
	if (std::getline(in, input)) {
		std::istringstream iss(input);
		char slash;
		int num, den;
		if (iss >> num >> slash >> den && slash == '/') {
			rational = Rational(num, den);
		}
	}
	return in;
}
